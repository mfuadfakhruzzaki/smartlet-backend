version: "3.8"

# Production configuration for Docker Compose
# Usage: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

services:
  # PostgreSQL Database - Production
  postgres:
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./migrations/001_create_tables.sql:/docker-entrypoint-initdb.d/001_create_tables.sql
    # Remove port mapping for security (internal access only)
    ports: []

  # TimescaleDB - Production
  timescaledb:
    restart: always
    environment:
      POSTGRES_USER: ${TIMESCALE_USER}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD}
      POSTGRES_DB: ${TIMESCALE_DB}
    volumes:
      - timescale_prod_data:/var/lib/postgresql/data
      - ./migrations/002_timescale_tables.sql:/docker-entrypoint-initdb.d/002_timescale_tables.sql
    # Remove port mapping for security (internal access only)
    ports: []

  # MQTT Broker - Production
  mosquitto:
    restart: always
    volumes:
      - ./mosquitto.prod.conf:/mosquitto/config/mosquitto.conf
      - ./mosquitto_config/passwd:/mosquitto/config/passwd
      - ./mosquitto_config/acl:/mosquitto/config/acl
      - mosquitto_prod_data:/mosquitto/data
      - mosquitto_prod_logs:/mosquitto/log
    # Only expose MQTT port, not websocket for security
    ports:
      - "1883:1883"

  # Redis - Production
  redis:
    restart: always
    volumes:
      - redis_prod_data:/data
    # Remove port mapping for security (internal access only)
    ports: []
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # Backend - Production
  backend:
    restart: always
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSLMODE: disable

      # TimescaleDB
      TIMESCALE_HOST: timescaledb
      TIMESCALE_PORT: 5432
      TIMESCALE_USER: ${TIMESCALE_USER}
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD}
      TIMESCALE_DB: ${TIMESCALE_DB}
      TIMESCALE_SSLMODE: disable

      # JWT
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRY: ${JWT_EXPIRY}

      # Server
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0
      GIN_MODE: release

      # MQTT
      MQTT_BROKER: tcp://mosquitto:1883
      MQTT_CLIENT_ID: ${MQTT_CLIENT_ID}
      MQTT_USERNAME: ${MQTT_USERNAME}
      MQTT_PASSWORD: ${MQTT_PASSWORD}
      MQTT_TOPIC_SENSOR: ${MQTT_TOPIC_SENSOR}
      MQTT_TOPIC_CONTROL: ${MQTT_TOPIC_CONTROL}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: 0
    ports:
      - "8080:8080"
    # Add health check for production monitoring
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_prod_data:
  timescale_prod_data:
  mosquitto_prod_data:
  mosquitto_prod_logs:
  redis_prod_data:
