# Production configuration for Docker Compose
# Usage: docker-compose up -d

services:
  # PostgreSQL Database - Production
  postgres:
    image: postgres:15-alpine
    container_name: swiflet-postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-swiflet_db}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./migrations/001_create_tables.sql:/docker-entrypoint-initdb.d/001_create_tables.sql
    networks:
      - swiflet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # TimescaleDB - Production
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: swiflet-timescaledb
    restart: always
    environment:
      POSTGRES_USER: ${TIMESCALE_USER:-postgres}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-password}
      POSTGRES_DB: ${TIMESCALE_DB:-swiflet_timeseries}
    volumes:
      - timescale_prod_data:/var/lib/postgresql/data
      - ./migrations/002_timescale_tables.sql:/docker-entrypoint-initdb.d/002_timescale_tables.sql
    networks:
      - swiflet-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TIMESCALE_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MQTT Broker - Production
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: swiflet-mqtt
    restart: always
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mosquitto_prod_data:/mosquitto/data
      - mosquitto_prod_logs:/mosquitto/log
    ports:
      - "1883:1883"
      - "9001:9001"
    networks:
      - swiflet-network

  # Redis - Production
  redis:
    image: redis:7-alpine
    container_name: swiflet-redis
    restart: always
    volumes:
      - redis_prod_data:/data
    networks:
      - swiflet-network
    command: redis-server --appendonly yes

  # Backend - Production
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: swiflet-backend
    restart: always
    environment:
      # Database
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${DB_NAME:-swiflet_db}
      DB_SSLMODE: disable

      # TimescaleDB
      TIMESCALE_HOST: timescaledb
      TIMESCALE_PORT: 5432
      TIMESCALE_USER: ${TIMESCALE_USER:-postgres}
      TIMESCALE_PASSWORD: ${TIMESCALE_PASSWORD:-password}
      TIMESCALE_DB: ${TIMESCALE_DB:-swiflet_timeseries}
      TIMESCALE_SSLMODE: disable

      # JWT
      JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-key-for-development}
      JWT_EXPIRY: ${JWT_EXPIRY:-24h}

      # Server
      SERVER_PORT: 8080
      SERVER_HOST: 0.0.0.0
      GIN_MODE: release

      # MQTT
      MQTT_BROKER: tcp://mosquitto:1883
      MQTT_CLIENT_ID: ${MQTT_CLIENT_ID:-swiflet-backend}
      MQTT_USERNAME: ${MQTT_USERNAME:-}
      MQTT_PASSWORD: ${MQTT_PASSWORD:-}
      MQTT_TOPIC_SENSOR: ${MQTT_TOPIC_SENSOR:-sensors/+/data}
      MQTT_TOPIC_CONTROL: ${MQTT_TOPIC_CONTROL:-control/+/command}

      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      REDIS_DB: 0

      # MinIO S3 Storage (External Self-Hosted with Traefik)
      S3_ENDPOINT: https://s3.fuadfakhruz.id
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-minioadmin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-3mto8a4dlhffxvja}
      S3_BUCKET: ${S3_BUCKET:-swiftlead-storage}
      S3_REGION: ${S3_REGION:-}
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      timescaledb:
        condition: service_healthy
      mosquitto:
        condition: service_started
    networks:
      - swiflet-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_prod_data:
  timescale_prod_data:
  mosquitto_prod_data:
  mosquitto_prod_logs:
  redis_prod_data:

networks:
  swiflet-network:
    driver: bridge
